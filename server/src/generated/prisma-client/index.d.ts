// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  date: (where?: DateWhereInput) => Promise<boolean>;
  sitte: (where?: SitteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  date: (where: DateWhereUniqueInput) => DatePromise;
  dates: (args?: {
    where?: DateWhereInput;
    orderBy?: DateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Date>;
  datesConnection: (args?: {
    where?: DateWhereInput;
    orderBy?: DateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DateConnectionPromise;
  sitte: (where: SitteWhereUniqueInput) => SittePromise;
  sittes: (args?: {
    where?: SitteWhereInput;
    orderBy?: SitteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sitte>;
  sittesConnection: (args?: {
    where?: SitteWhereInput;
    orderBy?: SitteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SitteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDate: (data: DateCreateInput) => DatePromise;
  updateDate: (args: {
    data: DateUpdateInput;
    where: DateWhereUniqueInput;
  }) => DatePromise;
  updateManyDates: (args: {
    data: DateUpdateManyMutationInput;
    where?: DateWhereInput;
  }) => BatchPayloadPromise;
  upsertDate: (args: {
    where: DateWhereUniqueInput;
    create: DateCreateInput;
    update: DateUpdateInput;
  }) => DatePromise;
  deleteDate: (where: DateWhereUniqueInput) => DatePromise;
  deleteManyDates: (where?: DateWhereInput) => BatchPayloadPromise;
  createSitte: (data: SitteCreateInput) => SittePromise;
  updateSitte: (args: {
    data: SitteUpdateInput;
    where: SitteWhereUniqueInput;
  }) => SittePromise;
  updateManySittes: (args: {
    data: SitteUpdateManyMutationInput;
    where?: SitteWhereInput;
  }) => BatchPayloadPromise;
  upsertSitte: (args: {
    where: SitteWhereUniqueInput;
    create: SitteCreateInput;
    update: SitteUpdateInput;
  }) => SittePromise;
  deleteSitte: (where: SitteWhereUniqueInput) => SittePromise;
  deleteManySittes: (where?: SitteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  date: (
    where?: DateSubscriptionWhereInput
  ) => DateSubscriptionPayloadSubscription;
  sitte: (
    where?: SitteSubscriptionWhereInput
  ) => SitteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RateType = "HOURLY" | "FLAT";

export type AccountType = "TRIAL" | "MONTHLY_PAID";

export type Gender = "MALE" | "FEMALE" | "OTHER";

export type SitteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "rateAmount_ASC"
  | "rateAmount_DESC"
  | "rateType_ASC"
  | "rateType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "gender_ASC"
  | "gender_DESC";

export type DateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateObjectId_ASC"
  | "dateObjectId_DESC"
  | "month_ASC"
  | "month_DESC"
  | "day_ASC"
  | "day_DESC"
  | "year_ASC"
  | "year_DESC"
  | "hours_ASC"
  | "hours_DESC"
  | "dayOfWeek_ASC"
  | "dayOfWeek_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "paid_ASC"
  | "paid_DESC"
  | "isFixedRate_ASC"
  | "isFixedRate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "ccLast4_ASC"
  | "ccLast4_DESC"
  | "stripeId_ASC"
  | "stripeId_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneRequiredWithoutSittesInput {
  create?: UserCreateWithoutSittesInput;
  update?: UserUpdateWithoutSittesDataInput;
  upsert?: UserUpsertWithoutSittesInput;
  connect?: UserWhereUniqueInput;
}

export type DateWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DateCreateInput {
  dateObjectId: String;
  owner: SitteCreateOneWithoutDatesInput;
  month: Float;
  day: Float;
  year: Float;
  hours: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface DateUpsertWithWhereUniqueWithoutOwnerInput {
  where: DateWhereUniqueInput;
  update: DateUpdateWithoutOwnerDataInput;
  create: DateCreateWithoutOwnerInput;
}

export interface SitteCreateOneWithoutDatesInput {
  create?: SitteCreateWithoutDatesInput;
  connect?: SitteWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  type?: AccountType;
  type_not?: AccountType;
  type_in?: AccountType[] | AccountType;
  type_not_in?: AccountType[] | AccountType;
  ccLast4?: String;
  ccLast4_not?: String;
  ccLast4_in?: String[] | String;
  ccLast4_not_in?: String[] | String;
  ccLast4_lt?: String;
  ccLast4_lte?: String;
  ccLast4_gt?: String;
  ccLast4_gte?: String;
  ccLast4_contains?: String;
  ccLast4_not_contains?: String;
  ccLast4_starts_with?: String;
  ccLast4_not_starts_with?: String;
  ccLast4_ends_with?: String;
  ccLast4_not_ends_with?: String;
  stripeId?: String;
  stripeId_not?: String;
  stripeId_in?: String[] | String;
  stripeId_not_in?: String[] | String;
  stripeId_lt?: String;
  stripeId_lte?: String;
  stripeId_gt?: String;
  stripeId_gte?: String;
  stripeId_contains?: String;
  stripeId_not_contains?: String;
  stripeId_starts_with?: String;
  stripeId_not_starts_with?: String;
  stripeId_ends_with?: String;
  stripeId_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  sittes_every?: SitteWhereInput;
  sittes_some?: SitteWhereInput;
  sittes_none?: SitteWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SitteCreateWithoutDatesInput {
  firstName: String;
  lastName: String;
  birthday?: DateTimeInput;
  owner: UserCreateOneWithoutSittesInput;
  rateAmount: Float;
  rateType: RateType;
  gender: Gender;
}

export interface DateWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateObjectId?: String;
  dateObjectId_not?: String;
  dateObjectId_in?: String[] | String;
  dateObjectId_not_in?: String[] | String;
  dateObjectId_lt?: String;
  dateObjectId_lte?: String;
  dateObjectId_gt?: String;
  dateObjectId_gte?: String;
  dateObjectId_contains?: String;
  dateObjectId_not_contains?: String;
  dateObjectId_starts_with?: String;
  dateObjectId_not_starts_with?: String;
  dateObjectId_ends_with?: String;
  dateObjectId_not_ends_with?: String;
  owner?: SitteWhereInput;
  month?: Float;
  month_not?: Float;
  month_in?: Float[] | Float;
  month_not_in?: Float[] | Float;
  month_lt?: Float;
  month_lte?: Float;
  month_gt?: Float;
  month_gte?: Float;
  day?: Float;
  day_not?: Float;
  day_in?: Float[] | Float;
  day_not_in?: Float[] | Float;
  day_lt?: Float;
  day_lte?: Float;
  day_gt?: Float;
  day_gte?: Float;
  year?: Float;
  year_not?: Float;
  year_in?: Float[] | Float;
  year_not_in?: Float[] | Float;
  year_lt?: Float;
  year_lte?: Float;
  year_gt?: Float;
  year_gte?: Float;
  hours?: Float;
  hours_not?: Float;
  hours_in?: Float[] | Float;
  hours_not_in?: Float[] | Float;
  hours_lt?: Float;
  hours_lte?: Float;
  hours_gt?: Float;
  hours_gte?: Float;
  dayOfWeek?: String;
  dayOfWeek_not?: String;
  dayOfWeek_in?: String[] | String;
  dayOfWeek_not_in?: String[] | String;
  dayOfWeek_lt?: String;
  dayOfWeek_lte?: String;
  dayOfWeek_gt?: String;
  dayOfWeek_gte?: String;
  dayOfWeek_contains?: String;
  dayOfWeek_not_contains?: String;
  dayOfWeek_starts_with?: String;
  dayOfWeek_not_starts_with?: String;
  dayOfWeek_ends_with?: String;
  dayOfWeek_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  paid?: Float;
  paid_not?: Float;
  paid_in?: Float[] | Float;
  paid_not_in?: Float[] | Float;
  paid_lt?: Float;
  paid_lte?: Float;
  paid_gt?: Float;
  paid_gte?: Float;
  isFixedRate?: Boolean;
  isFixedRate_not?: Boolean;
  AND?: DateWhereInput[] | DateWhereInput;
  OR?: DateWhereInput[] | DateWhereInput;
  NOT?: DateWhereInput[] | DateWhereInput;
}

export interface UserCreateOneWithoutSittesInput {
  create?: UserCreateWithoutSittesInput;
  connect?: UserWhereUniqueInput;
}

export interface SitteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SitteWhereInput;
  AND?: SitteSubscriptionWhereInput[] | SitteSubscriptionWhereInput;
  OR?: SitteSubscriptionWhereInput[] | SitteSubscriptionWhereInput;
  NOT?: SitteSubscriptionWhereInput[] | SitteSubscriptionWhereInput;
}

export interface UserCreateWithoutSittesInput {
  email: String;
  password: String;
  type?: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  type?: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
}

export interface DateUpdateInput {
  dateObjectId?: String;
  owner?: SitteUpdateOneRequiredWithoutDatesInput;
  month?: Float;
  day?: Float;
  year?: Float;
  hours?: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface SitteUpdateManyWithWhereNestedInput {
  where: SitteScalarWhereInput;
  data: SitteUpdateManyDataInput;
}

export interface SitteUpdateOneRequiredWithoutDatesInput {
  create?: SitteCreateWithoutDatesInput;
  update?: SitteUpdateWithoutDatesDataInput;
  upsert?: SitteUpsertWithoutDatesInput;
  connect?: SitteWhereUniqueInput;
}

export interface SitteUpsertWithWhereUniqueWithoutOwnerInput {
  where: SitteWhereUniqueInput;
  update: SitteUpdateWithoutOwnerDataInput;
  create: SitteCreateWithoutOwnerInput;
}

export interface SitteUpdateWithoutDatesDataInput {
  firstName?: String;
  lastName?: String;
  birthday?: DateTimeInput;
  owner?: UserUpdateOneRequiredWithoutSittesInput;
  rateAmount?: Float;
  rateType?: RateType;
  gender?: Gender;
}

export type SitteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DateUpdateManyDataInput {
  dateObjectId?: String;
  month?: Float;
  day?: Float;
  year?: Float;
  hours?: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface SitteUpdateManyWithoutOwnerInput {
  create?: SitteCreateWithoutOwnerInput[] | SitteCreateWithoutOwnerInput;
  delete?: SitteWhereUniqueInput[] | SitteWhereUniqueInput;
  connect?: SitteWhereUniqueInput[] | SitteWhereUniqueInput;
  set?: SitteWhereUniqueInput[] | SitteWhereUniqueInput;
  disconnect?: SitteWhereUniqueInput[] | SitteWhereUniqueInput;
  update?:
    | SitteUpdateWithWhereUniqueWithoutOwnerInput[]
    | SitteUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | SitteUpsertWithWhereUniqueWithoutOwnerInput[]
    | SitteUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: SitteScalarWhereInput[] | SitteScalarWhereInput;
  updateMany?:
    | SitteUpdateManyWithWhereNestedInput[]
    | SitteUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithoutSittesDataInput {
  email?: String;
  password?: String;
  type?: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpsertWithoutSittesInput {
  update: UserUpdateWithoutSittesDataInput;
  create: UserCreateWithoutSittesInput;
}

export interface SitteCreateManyWithoutOwnerInput {
  create?: SitteCreateWithoutOwnerInput[] | SitteCreateWithoutOwnerInput;
  connect?: SitteWhereUniqueInput[] | SitteWhereUniqueInput;
}

export interface SitteUpsertWithoutDatesInput {
  update: SitteUpdateWithoutDatesDataInput;
  create: SitteCreateWithoutDatesInput;
}

export interface SitteUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  birthday?: DateTimeInput;
  rateAmount?: Float;
  rateType?: RateType;
  gender?: Gender;
}

export interface DateUpdateManyMutationInput {
  dateObjectId?: String;
  month?: Float;
  day?: Float;
  year?: Float;
  hours?: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface SitteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  birthday?: DateTimeInput;
  birthday_not?: DateTimeInput;
  birthday_in?: DateTimeInput[] | DateTimeInput;
  birthday_not_in?: DateTimeInput[] | DateTimeInput;
  birthday_lt?: DateTimeInput;
  birthday_lte?: DateTimeInput;
  birthday_gt?: DateTimeInput;
  birthday_gte?: DateTimeInput;
  owner?: UserWhereInput;
  rateAmount?: Float;
  rateAmount_not?: Float;
  rateAmount_in?: Float[] | Float;
  rateAmount_not_in?: Float[] | Float;
  rateAmount_lt?: Float;
  rateAmount_lte?: Float;
  rateAmount_gt?: Float;
  rateAmount_gte?: Float;
  rateType?: RateType;
  rateType_not?: RateType;
  rateType_in?: RateType[] | RateType;
  rateType_not_in?: RateType[] | RateType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  dates_every?: DateWhereInput;
  dates_some?: DateWhereInput;
  dates_none?: DateWhereInput;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  AND?: SitteWhereInput[] | SitteWhereInput;
  OR?: SitteWhereInput[] | SitteWhereInput;
  NOT?: SitteWhereInput[] | SitteWhereInput;
}

export interface DateUpdateManyWithWhereNestedInput {
  where: DateScalarWhereInput;
  data: DateUpdateManyDataInput;
}

export interface DateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DateWhereInput;
  AND?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
  OR?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
  NOT?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
}

export interface DateScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateObjectId?: String;
  dateObjectId_not?: String;
  dateObjectId_in?: String[] | String;
  dateObjectId_not_in?: String[] | String;
  dateObjectId_lt?: String;
  dateObjectId_lte?: String;
  dateObjectId_gt?: String;
  dateObjectId_gte?: String;
  dateObjectId_contains?: String;
  dateObjectId_not_contains?: String;
  dateObjectId_starts_with?: String;
  dateObjectId_not_starts_with?: String;
  dateObjectId_ends_with?: String;
  dateObjectId_not_ends_with?: String;
  month?: Float;
  month_not?: Float;
  month_in?: Float[] | Float;
  month_not_in?: Float[] | Float;
  month_lt?: Float;
  month_lte?: Float;
  month_gt?: Float;
  month_gte?: Float;
  day?: Float;
  day_not?: Float;
  day_in?: Float[] | Float;
  day_not_in?: Float[] | Float;
  day_lt?: Float;
  day_lte?: Float;
  day_gt?: Float;
  day_gte?: Float;
  year?: Float;
  year_not?: Float;
  year_in?: Float[] | Float;
  year_not_in?: Float[] | Float;
  year_lt?: Float;
  year_lte?: Float;
  year_gt?: Float;
  year_gte?: Float;
  hours?: Float;
  hours_not?: Float;
  hours_in?: Float[] | Float;
  hours_not_in?: Float[] | Float;
  hours_lt?: Float;
  hours_lte?: Float;
  hours_gt?: Float;
  hours_gte?: Float;
  dayOfWeek?: String;
  dayOfWeek_not?: String;
  dayOfWeek_in?: String[] | String;
  dayOfWeek_not_in?: String[] | String;
  dayOfWeek_lt?: String;
  dayOfWeek_lte?: String;
  dayOfWeek_gt?: String;
  dayOfWeek_gte?: String;
  dayOfWeek_contains?: String;
  dayOfWeek_not_contains?: String;
  dayOfWeek_starts_with?: String;
  dayOfWeek_not_starts_with?: String;
  dayOfWeek_ends_with?: String;
  dayOfWeek_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  paid?: Float;
  paid_not?: Float;
  paid_in?: Float[] | Float;
  paid_not_in?: Float[] | Float;
  paid_lt?: Float;
  paid_lte?: Float;
  paid_gt?: Float;
  paid_gte?: Float;
  isFixedRate?: Boolean;
  isFixedRate_not?: Boolean;
  AND?: DateScalarWhereInput[] | DateScalarWhereInput;
  OR?: DateScalarWhereInput[] | DateScalarWhereInput;
  NOT?: DateScalarWhereInput[] | DateScalarWhereInput;
}

export interface SitteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  birthday?: DateTimeInput;
  birthday_not?: DateTimeInput;
  birthday_in?: DateTimeInput[] | DateTimeInput;
  birthday_not_in?: DateTimeInput[] | DateTimeInput;
  birthday_lt?: DateTimeInput;
  birthday_lte?: DateTimeInput;
  birthday_gt?: DateTimeInput;
  birthday_gte?: DateTimeInput;
  rateAmount?: Float;
  rateAmount_not?: Float;
  rateAmount_in?: Float[] | Float;
  rateAmount_not_in?: Float[] | Float;
  rateAmount_lt?: Float;
  rateAmount_lte?: Float;
  rateAmount_gt?: Float;
  rateAmount_gte?: Float;
  rateType?: RateType;
  rateType_not?: RateType;
  rateType_in?: RateType[] | RateType;
  rateType_not_in?: RateType[] | RateType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  AND?: SitteScalarWhereInput[] | SitteScalarWhereInput;
  OR?: SitteScalarWhereInput[] | SitteScalarWhereInput;
  NOT?: SitteScalarWhereInput[] | SitteScalarWhereInput;
}

export interface SitteCreateInput {
  firstName: String;
  lastName: String;
  birthday?: DateTimeInput;
  owner: UserCreateOneWithoutSittesInput;
  rateAmount: Float;
  rateType: RateType;
  dates?: DateCreateManyWithoutOwnerInput;
  gender: Gender;
}

export interface SitteUpdateWithWhereUniqueWithoutOwnerInput {
  where: SitteWhereUniqueInput;
  data: SitteUpdateWithoutOwnerDataInput;
}

export interface DateCreateManyWithoutOwnerInput {
  create?: DateCreateWithoutOwnerInput[] | DateCreateWithoutOwnerInput;
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput;
}

export interface SitteCreateWithoutOwnerInput {
  firstName: String;
  lastName: String;
  birthday?: DateTimeInput;
  rateAmount: Float;
  rateType: RateType;
  dates?: DateCreateManyWithoutOwnerInput;
  gender: Gender;
}

export interface DateCreateWithoutOwnerInput {
  dateObjectId: String;
  month: Float;
  day: Float;
  year: Float;
  hours: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface SitteUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  birthday?: DateTimeInput;
  rateAmount?: Float;
  rateType?: RateType;
  gender?: Gender;
}

export interface DateUpdateWithoutOwnerDataInput {
  dateObjectId?: String;
  month?: Float;
  day?: Float;
  year?: Float;
  hours?: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface DateUpdateWithWhereUniqueWithoutOwnerInput {
  where: DateWhereUniqueInput;
  data: DateUpdateWithoutOwnerDataInput;
}

export interface DateUpdateManyWithoutOwnerInput {
  create?: DateCreateWithoutOwnerInput[] | DateCreateWithoutOwnerInput;
  delete?: DateWhereUniqueInput[] | DateWhereUniqueInput;
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput;
  set?: DateWhereUniqueInput[] | DateWhereUniqueInput;
  disconnect?: DateWhereUniqueInput[] | DateWhereUniqueInput;
  update?:
    | DateUpdateWithWhereUniqueWithoutOwnerInput[]
    | DateUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | DateUpsertWithWhereUniqueWithoutOwnerInput[]
    | DateUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: DateScalarWhereInput[] | DateScalarWhereInput;
  updateMany?:
    | DateUpdateManyWithWhereNestedInput[]
    | DateUpdateManyWithWhereNestedInput;
}

export interface SitteUpdateInput {
  firstName?: String;
  lastName?: String;
  birthday?: DateTimeInput;
  owner?: UserUpdateOneRequiredWithoutSittesInput;
  rateAmount?: Float;
  rateType?: RateType;
  dates?: DateUpdateManyWithoutOwnerInput;
  gender?: Gender;
}

export interface SitteUpdateWithoutOwnerDataInput {
  firstName?: String;
  lastName?: String;
  birthday?: DateTimeInput;
  rateAmount?: Float;
  rateType?: RateType;
  dates?: DateUpdateManyWithoutOwnerInput;
  gender?: Gender;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  type?: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
  sittes?: SitteCreateManyWithoutOwnerInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  type?: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
  sittes?: SitteUpdateManyWithoutOwnerInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DateConnection {
  pageInfo: PageInfo;
  edges: DateEdge[];
}

export interface DateConnectionPromise
  extends Promise<DateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DateEdge>>() => T;
  aggregate: <T = AggregateDatePromise>() => T;
}

export interface DateConnectionSubscription
  extends Promise<AsyncIterator<DateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDateSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<AccountType>;
  ccLast4: () => Promise<String>;
  stripeId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<AccountType>>;
  ccLast4: () => Promise<AsyncIterator<String>>;
  stripeId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

export interface DateEdge {
  node: Date;
  cursor: String;
}

export interface DateEdgePromise extends Promise<DateEdge>, Fragmentable {
  node: <T = DatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DateEdgeSubscription
  extends Promise<AsyncIterator<DateEdge>>,
    Fragmentable {
  node: <T = DateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DatePreviousValues {
  id: ID_Output;
  dateObjectId: String;
  month: Float;
  day: Float;
  year: Float;
  hours: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface DatePreviousValuesPromise
  extends Promise<DatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateObjectId: () => Promise<String>;
  month: () => Promise<Float>;
  day: () => Promise<Float>;
  year: () => Promise<Float>;
  hours: () => Promise<Float>;
  dayOfWeek: () => Promise<String>;
  notes: () => Promise<String>;
  paid: () => Promise<Float>;
  isFixedRate: () => Promise<Boolean>;
}

export interface DatePreviousValuesSubscription
  extends Promise<AsyncIterator<DatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateObjectId: () => Promise<AsyncIterator<String>>;
  month: () => Promise<AsyncIterator<Float>>;
  day: () => Promise<AsyncIterator<Float>>;
  year: () => Promise<AsyncIterator<Float>>;
  hours: () => Promise<AsyncIterator<Float>>;
  dayOfWeek: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  paid: () => Promise<AsyncIterator<Float>>;
  isFixedRate: () => Promise<AsyncIterator<Boolean>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Sitte {
  id: ID_Output;
  firstName: String;
  lastName: String;
  birthday?: DateTimeOutput;
  rateAmount: Float;
  rateType: RateType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  gender: Gender;
}

export interface SittePromise extends Promise<Sitte>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  rateAmount: () => Promise<Float>;
  rateType: () => Promise<RateType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  dates: <T = FragmentableArray<Date>>(args?: {
    where?: DateWhereInput;
    orderBy?: DateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<Gender>;
}

export interface SitteSubscription
  extends Promise<AsyncIterator<Sitte>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  rateAmount: () => Promise<AsyncIterator<Float>>;
  rateType: () => Promise<AsyncIterator<RateType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  dates: <T = Promise<AsyncIterator<DateSubscription>>>(args?: {
    where?: DateWhereInput;
    orderBy?: DateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<AsyncIterator<Gender>>;
}

export interface SittePreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  birthday?: DateTimeOutput;
  rateAmount: Float;
  rateType: RateType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  gender: Gender;
}

export interface SittePreviousValuesPromise
  extends Promise<SittePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  rateAmount: () => Promise<Float>;
  rateType: () => Promise<RateType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
}

export interface SittePreviousValuesSubscription
  extends Promise<AsyncIterator<SittePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  rateAmount: () => Promise<AsyncIterator<Float>>;
  rateType: () => Promise<AsyncIterator<RateType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSitte {
  count: Int;
}

export interface AggregateSittePromise
  extends Promise<AggregateSitte>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSitteSubscription
  extends Promise<AsyncIterator<AggregateSitte>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SitteConnection {
  pageInfo: PageInfo;
  edges: SitteEdge[];
}

export interface SitteConnectionPromise
  extends Promise<SitteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SitteEdge>>() => T;
  aggregate: <T = AggregateSittePromise>() => T;
}

export interface SitteConnectionSubscription
  extends Promise<AsyncIterator<SitteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SitteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSitteSubscription>() => T;
}

export interface DateSubscriptionPayload {
  mutation: MutationType;
  node: Date;
  updatedFields: String[];
  previousValues: DatePreviousValues;
}

export interface DateSubscriptionPayloadPromise
  extends Promise<DateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DatePreviousValuesPromise>() => T;
}

export interface DateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DatePreviousValuesSubscription>() => T;
}

export interface Date {
  id: ID_Output;
  dateObjectId: String;
  month: Float;
  day: Float;
  year: Float;
  hours: Float;
  dayOfWeek?: String;
  notes?: String;
  paid?: Float;
  isFixedRate?: Boolean;
}

export interface DatePromise extends Promise<Date>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateObjectId: () => Promise<String>;
  owner: <T = SittePromise>() => T;
  month: () => Promise<Float>;
  day: () => Promise<Float>;
  year: () => Promise<Float>;
  hours: () => Promise<Float>;
  dayOfWeek: () => Promise<String>;
  notes: () => Promise<String>;
  paid: () => Promise<Float>;
  isFixedRate: () => Promise<Boolean>;
}

export interface DateSubscription
  extends Promise<AsyncIterator<Date>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateObjectId: () => Promise<AsyncIterator<String>>;
  owner: <T = SitteSubscription>() => T;
  month: () => Promise<AsyncIterator<Float>>;
  day: () => Promise<AsyncIterator<Float>>;
  year: () => Promise<AsyncIterator<Float>>;
  hours: () => Promise<AsyncIterator<Float>>;
  dayOfWeek: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  paid: () => Promise<AsyncIterator<Float>>;
  isFixedRate: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: AccountType;
  ccLast4?: String;
  stripeId?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<AccountType>;
  ccLast4: () => Promise<String>;
  stripeId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sittes: <T = FragmentableArray<Sitte>>(args?: {
    where?: SitteWhereInput;
    orderBy?: SitteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<AccountType>>;
  ccLast4: () => Promise<AsyncIterator<String>>;
  stripeId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sittes: <T = Promise<AsyncIterator<SitteSubscription>>>(args?: {
    where?: SitteWhereInput;
    orderBy?: SitteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SitteSubscriptionPayload {
  mutation: MutationType;
  node: Sitte;
  updatedFields: String[];
  previousValues: SittePreviousValues;
}

export interface SitteSubscriptionPayloadPromise
  extends Promise<SitteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SittePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SittePreviousValuesPromise>() => T;
}

export interface SitteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SitteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SitteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SittePreviousValuesSubscription>() => T;
}

export interface AggregateDate {
  count: Int;
}

export interface AggregateDatePromise
  extends Promise<AggregateDate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDateSubscription
  extends Promise<AsyncIterator<AggregateDate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SitteEdge {
  node: Sitte;
  cursor: String;
}

export interface SitteEdgePromise extends Promise<SitteEdge>, Fragmentable {
  node: <T = SittePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SitteEdgeSubscription
  extends Promise<AsyncIterator<SitteEdge>>,
    Fragmentable {
  node: <T = SitteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AccountType",
    embedded: false
  },
  {
    name: "Date",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "RateType",
    embedded: false
  },
  {
    name: "Sitte",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
